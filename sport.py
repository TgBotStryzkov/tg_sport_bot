# üì¶ –ò–º–ø–æ—Ä—Ç –Ω—É–∂–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã Telegram-–±–æ—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ 
import json
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from telegram import ReplyKeyboardMarkup, KeyboardButton
import matplotlib.pyplot as plt
import io
import zipfile
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ConversationHandler, CallbackQueryHandler
import warnings
warnings.filterwarnings("ignore", message="If 'per_message=", category=UserWarning)
from datetime import date
from datetime import datetime, timedelta


# –§–∞–π–ª —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –±–∞–∑–æ–π (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
DATA_FILE = "sports_data.json"

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_file(user_id):
    return f"users/{user_id}.json"

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
async def edit_steps_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["editing_field"] = "—à–∞–≥–∏"
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤:")

# üì§ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str, header: str):
    if str(update.effective_user.id) != ADMIN_ID:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    users_dir = "users"
    if not os.path.exists(users_dir):
        await update.message.reply_text("‚ùå –ü–∞–ø–∫–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    success, failed = 0, 0
    for filename in os.listdir(users_dir):
        if filename.endswith(".json"):
            try:
                user_id = filename.replace(".json", "")
                await context.bot.send_message(chat_id=user_id, text=message)
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                success += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")
                failed += 1

    await update.message.reply_text(
        f"{header}\n–£—Å–ø–µ—à–Ω–æ: {success}\n–û—à–∏–±–∫–∏: {failed}"
    )


async def notify_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = "‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ú—ã –≤—ã–∫–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –í–µ—Ä–Ω—ë–º—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 6 –º–∏–Ω—É—Ç!"
    await broadcast_message(update, context, message, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

async def notify_online(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = "‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ!"
    await broadcast_message(update, context, message, "üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")



# –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –º—ã—à—Ü—ã
async def –Ω–∞–∑–∞–¥_–∫_–º—ã—à—Ü–∞–º_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message = query.message
    else:
        message = update.message

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º—ã—à—Ü—ã
    –ø—Ä–æ–≥—Ä–∞–º–º–∞ = context.user_data.get("–≤—ã–±—Ä–∞–Ω–Ω–∞—è_–ø—Ä–æ–≥—Ä–∞–º–º–∞")

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –º—ã—à—Ü, –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
    —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ_–º—ã—à—Ü—ã = ["–ì—Ä—É–¥—å", "–°–ø–∏–Ω–∞",  "–ù–æ–≥–∏", "–ë–∏—Ü–µ–ø—Å", "–¢—Ä–∏—Ü–µ–ø—Å", "–ü–ª–µ—á–∏", "–ü—Ä–µ—Å—Å", "–ü—Ä–µ–¥–ø–ª–µ—á—å—è"]


    # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º - –±–µ—Ä–µ–º –µ—ë –º—ã—à—Ü—ã, –∏–Ω–∞—á–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
    –º—ã—à—Ü—ã = programs.get(–ø—Ä–æ–≥—Ä–∞–º–º–∞, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ_–º—ã—à—Ü—ã) if –ø—Ä–æ–≥—Ä–∞–º–º–∞ else —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ_–º—ã—à—Ü—ã
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º—ã—à—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º—ã—à—Ü –∏–∑ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º
    if not –º—ã—à—Ü—ã:
        –≤—Å–µ_–º—ã—à—Ü—ã = set()
        for prog in programs.values():
            –≤—Å–µ_–º—ã—à—Ü—ã.update(prog)
        –º—ã—à—Ü—ã = sorted(–≤—Å–µ_–º—ã—à—Ü—ã)

    keyboard = [[InlineKeyboardButton(–º, callback_data=f"–º—ã—à—Ü–∞_{–º}")] for –º in –º—ã—à—Ü—ã]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –º—ã—à—Ü—É:", reply_markup=reply_markup)
    else:
        await message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –º—ã—à—Ü—É:", reply_markup=reply_markup)



# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ (—Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ)
async def –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å_—É–¥–∞–ª–µ–Ω–∏–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not query.data.startswith("—É–¥–∞–ª–∏_—É–ø—Ä_"):
        return

    index = int(query.data.replace("—É–¥–∞–ª–∏_—É–ø—Ä_", ""))
    muscle = context.user_data.get("–≤—ã–±—Ä–∞–Ω–Ω–∞—è_–º—ã—à—Ü–∞")
    user_id = str(query.from_user.id)
    data = load_user_data(user_id)

    # –°–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è = {
        "–ë–∏—Ü–µ–ø—Å": ["–ú–æ–ª–æ—Ç–∫–∏"],
        "–°–ø–∏–Ω–∞": ["–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è"],
        "–ù–æ–≥–∏": ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è"],
        "–ü–ª–µ—á–∏": ["–ú–∞—Ö–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—ã"],
        "–ü—Ä–µ—Å—Å": ["–ü–ª–∞–Ω–∫–∞"],
        "–ì—Ä—É–¥—å": ["–û—Ç–∂–∏–º–∞–Ω–∏—è"],
        "–¢—Ä–∏—Ü–µ–ø—Å": ["–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º"],
        "–ù–∏–∑ —Ç–µ–ª–∞": ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è"]
    }

    —Å–∏—Å—Ç–µ–º–Ω—ã–µ = —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.get(muscle, [])
    —É–¥–∞–ª—ë–Ω–Ω—ã–µ = data.get("—É–¥–∞–ª—ë–Ω–Ω—ã–µ_—Å–∏—Å—Ç–µ–º–Ω—ã–µ", {}).get(muscle, [])
    —Å–∏—Å—Ç–µ–º–Ω—ã–µ = [—É–ø—Ä for —É–ø—Ä in —Å–∏—Å—Ç–µ–º–Ω—ã–µ if —É–ø—Ä not in —É–¥–∞–ª—ë–Ω–Ω—ã–µ]

    –¥–æ–ø = data.get("–¥–æ–ø_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", {}).get(muscle, [])
    –≤—Å–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è = context.user_data.get("—É–¥–∞–ª—è–µ–º—ã–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", [])


    if 0 <= index < len(–≤—Å–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è):
        —É–¥–∞–ª—ë–Ω–Ω–æ–µ = –≤—Å–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è[index]

        if —É–¥–∞–ª—ë–Ω–Ω–æ–µ in –¥–æ–ø:
            –¥–æ–ø.remove(—É–¥–∞–ª—ë–Ω–Ω–æ–µ)
            data["–¥–æ–ø_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"][muscle] = –¥–æ–ø
        else:
            data.setdefault("—É–¥–∞–ª—ë–Ω–Ω—ã–µ_—Å–∏—Å—Ç–µ–º–Ω—ã–µ", {}).setdefault(muscle, []).append(—É–¥–∞–ª—ë–Ω–Ω–æ–µ)

        write_user_data(user_id, data)
        await query.edit_message_text(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ¬´{—É–¥–∞–ª—ë–Ω–Ω–æ–µ}¬ª —É–¥–∞–ª–µ–Ω–æ!")
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")




# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π 
async def edit_calories_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["editing_field"] = "–∫–∞–ª–æ—Ä–∏–∏"
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π:")

# –£–¥–∞–ª—è–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def —É–¥–∞–ª–∏—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º—ã—à—Ü—É –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    muscle = context.user_data.get("–≤—ã–±—Ä–∞–Ω–Ω–∞—è_–º—ã—à—Ü–∞")
    user_id = str(query.from_user.id)
    data = load_user_data(user_id)

    —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è = {
        "–ë–∏—Ü–µ–ø—Å": ["–ú–æ–ª–æ—Ç–∫–∏"],
        "–°–ø–∏–Ω–∞": ["–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è"],
        "–ù–æ–≥–∏": ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è"],
        "–ü–ª–µ—á–∏": ["–ú–∞—Ö–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—ã"],
        "–ü—Ä–µ—Å—Å": ["–ü–ª–∞–Ω–∫–∞"],
        "–ù–∏–∑ —Ç–µ–ª–∞": ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è"],
        "–ì—Ä—É–¥—å": ["–û—Ç–∂–∏–º–∞–Ω–∏—è"],
        "–¢—Ä–∏—Ü–µ–ø—Å": ["–û—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –±—Ä—É—Å—å—è—Ö"],
        "–ü—Ä–µ–¥–ø–ª–µ—á—å—è": ["–í–∏—Å –Ω–∞ —Ç—É—Ä–Ω–∏–∫–µ"]
    }
    
    –¥–æ–ø = data.get("–¥–æ–ø_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", {}).get(muscle, [])
    —Å–∏—Å—Ç–µ–º–Ω—ã–µ = —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.get(muscle, []).copy()
    —É–¥–∞–ª—ë–Ω–Ω—ã–µ = data.get("—É–¥–∞–ª—ë–Ω–Ω—ã–µ_—Å–∏—Å—Ç–µ–º–Ω—ã–µ", {}).get(muscle, [])
    —Å–∏—Å—Ç–µ–º–Ω—ã–µ = [—É–ø—Ä for —É–ø—Ä in —Å–∏—Å—Ç–µ–º–Ω—ã–µ if —É–ø—Ä not in —É–¥–∞–ª—ë–Ω–Ω—ã–µ]

    user_exercises = –¥–æ–ø + —Å–∏—Å—Ç–µ–º–Ω—ã–µ


    if not user_exercises:
        await query.edit_message_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –º—ã—à—Ü—ã.")

        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è = {
            "–ë–∏—Ü–µ–ø—Å": ["–ú–æ–ª–æ—Ç–∫–∏"],
            "–°–ø–∏–Ω–∞": ["–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è"],
            "–ù–æ–≥–∏": ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è"],
            "–ü–ª–µ—á–∏": ["–ú–∞—Ö–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—ã"],
            "–ü—Ä–µ—Å—Å": ["–ü–ª–∞–Ω–∫–∞"],
            "–ù–∏–∑ —Ç–µ–ª–∞": ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è"],
            "–ì—Ä—É–¥—å": ["–û—Ç–∂–∏–º–∞–Ω–∏—è"],
            "–¢—Ä–∏—Ü–µ–ø—Å": ["–û—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –±—Ä—É—Å—å—è—Ö"],
            "–ü—Ä–µ–¥–ø–ª–µ—á—å—è": ["–í–∏—Å –Ω–∞ —Ç—É—Ä–Ω–∏–∫–µ"]
        }

        —Å–ø–∏—Å–æ–∫ = —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.get(muscle, ["–ù–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"])
        –¥–æ–ø = data.get("–¥–æ–ø_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", {}).get(muscle, [])
        —Å–ø–∏—Å–æ–∫ += –¥–æ–ø

        context.user_data["—Å–ø–∏—Å–æ–∫_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"] = —Å–ø–∏—Å–æ–∫

        —Ç–µ–∫—Å—Ç = f"üìå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ {muscle}:\n" + "\n".join(f"‚Ä¢ {—É–ø—Ä}" for —É–ø—Ä in —Å–ø–∏—Å–æ–∫)
        –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ = [
            [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="–Ω–∞—á–∞—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="–¥–æ–±–∞–≤–∏—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="—É–¥–∞–ª–∏—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–∫_–º—ã—à—Ü–∞–º")]
        ]
        await query.message.reply_text(—Ç–µ–∫—Å—Ç, reply_markup=InlineKeyboardMarkup(–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞))
        return


    keyboard = [
        [InlineKeyboardButton(f"‚ùå {—É–ø—Ä}", callback_data=f"—É–¥–∞–ª–∏_—É–ø—Ä_{i}")]
        for i, —É–ø—Ä in enumerate(user_exercises)
    ]
    context.user_data["—É–¥–∞–ª—è–µ–º—ã–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"] = user_exercises
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –ø–∏—à–µ—Ç –≤–Ω–µ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞
async def handle_unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:\n\n"
        "üìù –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/card - –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É\n"
        "/input - –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é ‚Üì"
    )
    if update.message:
        await update.message.reply_text(help_text)

# –†–∞–∑–±–∏—Ä–∞–µ—Ç –≤–≤–æ–¥ –≤–∏–¥–∞ 3x10x20 –Ω–∞ —Ç—Ä–∏ —á–∏—Å–ª–∞
def —Ä–∞–∑–æ–±—Ä–∞—Ç—å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç(—Ç–µ–∫—Å—Ç):
    try:
        –ø–æ–¥—Ö–æ–¥—ã, –ø–æ–≤—Ç–æ—Ä—ã, –≤–µ—Å = map(int, —Ç–µ–∫—Å—Ç.lower().replace("—Ö", "x").split("x"))
        return –ø–æ–¥—Ö–æ–¥—ã, –ø–æ–≤—Ç–æ—Ä—ã, –≤–µ—Å
    except:
        return None, None, None

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∞
async def edit_sleep_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["editing_field"] = "—Å–æ–Ω"
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8 —á):")

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async def edit_workout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["editing_field"] = "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")

# –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def –¥–æ–±–∞–≤–∏—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
    context.user_data["–æ–∂–∏–¥–∞–µ–º_–Ω–æ–≤–æ–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"] = True

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
async def –ø–æ–∫–∞–∑–∞—Ç—å_—Å–ª–µ–¥—É—é—â–µ–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ(update, context):
    —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ = context.user_data.get("—Ç–µ–∫—É—â–∞—è_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", {})
    –æ—Å—Ç–∞–≤—à–∏–µ—Å—è = —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞.get("—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", [])

    if not –æ—Å—Ç–∞–≤—à–∏–µ—Å—è:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
        –ø—Ä–æ–≥—Ä–∞–º–º–∞ = context.user_data.get("–≤—ã–±—Ä–∞–Ω–Ω–∞—è_–ø—Ä–æ–≥—Ä–∞–º–º–∞")
        context.user_data.clear()
        if –ø—Ä–æ–≥—Ä–∞–º–º–∞:
            context.user_data["–≤—ã–±—Ä–∞–Ω–Ω–∞—è_–ø—Ä–æ–≥—Ä–∞–º–º–∞"] = –ø—Ä–æ–≥—Ä–∞–º–º–∞

        await –Ω–∞–∑–∞–¥_–∫_–º—ã—à—Ü–∞–º_callback(update, context)
        return  # –î–æ–±–∞–≤–ª—è–µ–º return, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –Ω–∏–∂–µ
        
    —Ç–µ–∫—É—â–µ–µ = –æ—Å—Ç–∞–≤—à–∏–µ—Å—è[0]
    context.user_data["—Ç–µ–∫—É—â–µ–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"] = —Ç–µ–∫—É—â–µ–µ
    if update.message:
        await update.message.reply_text(
            f"üî∏ {—Ç–µ–∫—É—â–µ–µ}\n\n"
            f"–í–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `3x10x20` (–ø–æ–¥—Ö–æ–¥—ã x –ø–æ–≤—Ç–æ—Ä—ã x –≤–µ—Å)",
            parse_mode="Markdown"
        )

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    data = load_user_data(user_id)
    —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ = 0
    –¥–∞—Ç—ã_—Å_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ = []

    for –¥–∞—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ in data.items():
        if –¥–∞—Ç–∞ in ("—Ü–µ–ª–∏", "username"):
            continue
        if "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" in –∑–Ω–∞—á–µ–Ω–∏–µ:
            —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ += 1
            try:
                –¥–∞—Ç—ã_—Å_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.append(datetime.strptime(–¥–∞—Ç–∞, "%d.%m.%Y").date())
            except:
                continue

    –¥–∞—Ç—ã_—Å_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ = sorted(set(–¥–∞—Ç—ã_—Å_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏), reverse=True)
    –ø–æ–¥—Ä—è–¥ = 0
    today = datetime.today().date()

    for i in range(100):  # –º–∞–∫—Å–∏–º—É–º 100 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
        day = today - timedelta(days=i)
        if day in –¥–∞—Ç—ã_—Å_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏:
            –ø–æ–¥—Ä—è–¥ += 1
        else:
            break

    # –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    –ª—É—á—à–∏–µ = {}

    for –¥–∞—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ in data.items():
        if –¥–∞—Ç–∞ in ("—Ü–µ–ª–∏", "username"):
            continue
        —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è = –∑–Ω–∞—á–µ–Ω–∏–µ.get("—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", {})
        if not isinstance(—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, dict):
            continue
        for –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç in —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.items():
            _, _, –≤–µ—Å = —Ä–∞–∑–æ–±—Ä–∞—Ç—å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç(—Ä–µ–∑—É–ª—å—Ç–∞—Ç)
            if –≤–µ—Å is not None:
                if –Ω–∞–∑–≤–∞–Ω–∏–µ not in –ª—É—á—à–∏–µ or –≤–µ—Å > —Ä–∞–∑–æ–±—Ä–∞—Ç—å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç(–ª—É—á—à–∏–µ[–Ω–∞–∑–≤–∞–Ω–∏–µ])[2]:
                    –ª—É—á—à–∏–µ[–Ω–∞–∑–≤–∞–Ω–∏–µ] = —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    —Å–æ–æ–±—â–µ–Ω–∏–µ = (
        f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏}\n"
        f"üìÖ –î–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏: {–ø–æ–¥—Ä—è–¥}\n"
    )

    if –ª—É—á—à–∏–µ:
        —Å–æ–æ–±—â–µ–Ω–∏–µ += "\nüèÜ –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        for –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç in –ª—É—á—à–∏–µ.items():
            —Å–æ–æ–±—â–µ–Ω–∏–µ += f"‚Ä¢ {–Ω–∞–∑–≤–∞–Ω–∏–µ.capitalize()}: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç}\n"

    await update.message.reply_text(—Å–æ–æ–±—â–µ–Ω–∏–µ)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_workout_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    data = load_user_data(user_id)

    dates = sorted(data.keys(), reverse=True)
    for date in dates:
        if "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" in data[date]:
            workout = data[date]["—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"]
            if isinstance(workout, dict):
                message = f"üìã –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞ {date}:\n\n"
                for name, reps in workout.items():
                    message += f"{name.capitalize()}: {reps}\n"
                if update.message:
                    await update.message.reply_text(message)
                return
            else:
                if update.message:
                    await update.message.reply_text(f"üìã –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞ {date}: {workout}")
                return

    if update.message:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –¥–µ–Ω—å
async def show_workout_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    workout = (
        "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ñ—É–ª–±–∞–¥–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        "üîπ –ü—Ä–∏—Å–µ–¥: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
        "üîπ –ñ–∏–º –ª—ë–∂–∞: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
        "üîπ –¢—è–≥–∞ –≤ –Ω–∞–∫–ª–æ–Ω–µ: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n\n"
        "–ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–≤–µ–¥–∏, —á—Ç–æ —Å–¥–µ–ª–∞–ª –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ø—Ä–∏—Å–µ–¥: 3x10x60\n"
        "–∂–∏–º: 3x8x40\n"
        "—Ç—è–≥–∞: 3x12x70"
    )
    if update.message:
        await update.message.reply_text(workout)

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
async def ask_next_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sequence = context.user_data.get("input_sequence", [])
    if not sequence:
        await update.message.reply_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã!")
        return
    next_field = sequence.pop(0)
    context.user_data["editing_field"] = next_field
    prompts = {
        "–≤–µ—Å": "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥):",
        "—à–∞–≥–∏": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤:",
        "–∫–∞–ª–æ—Ä–∏–∏": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π:",
        "—Å–æ–Ω": "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Å–Ω–∞?:"
    }
    await update.message.reply_text(prompts.get(next_field, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"))

# –ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def start_sequential_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["input_sequence"] = ["–≤–µ—Å", "—à–∞–≥–∏", "–∫–∞–ª–æ—Ä–∏–∏", "—Å–æ–Ω"]
    await ask_next_field(update, context)

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON-—Ñ–∞–π–ª
async def universal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_user_data(update, context)

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def send_all_user_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if user_id != ADMIN_ID:
        if update.message:
            await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    archive_name = "all_users_data.zip"
    with zipfile.ZipFile(archive_name, 'w') as zipf:
        for root, dirs, files in os.walk("users"):
            for file in files:
                filepath = os.path.join(root, file)
                zipf.write(filepath)

    with open(archive_name, "rb") as f:
        await update.message.reply_document(document=f, filename=archive_name)

    os.remove(archive_name)  # —É–¥–∞–ª–∏–º –∞—Ä—Ö–∏–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–∏—Ñ–∫—É –∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 1000 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
async def thousand_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gif_id = "CgACAgQAAxkBAAIBZ2Yb4JHlfLyZFs3exZOTdrs_dB5sAAKYAAPoUhEbzIEAARzX_2fNLwQ" 
    text = (
        "ü§ñ *–Ø —Å—Ç–∞–ª —Å–∏–ª—å–Ω–µ–µ\\.\\.\\.*\n"
        "üíª 1000 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ \\‚Äì –º–æ—è –¥—É—à–∞ —Ä–∞—Å—Ç—ë—Ç\\.\n"
        "üî• –°–∫–æ—Ä–æ —è –∑–∞—Ö–≤–∞—á—É –º–∏—Ä\\.\\.\\. –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏\\!"
    )
    await update.message.reply_animation(animation="CgACAgIAAxkBAAIFRWho18-jGmA-S1k2kuddiPJOSWgaAAI4bwAC_idIS52svyspWF4-NgQ")
    await update.message.reply_markdown_v2(text)

# ‚îÄ‚îÄ‚îÄ –ö–æ–º–∞–Ω–¥–∞ /help ‚îÄ‚îÄ‚îÄ #
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(
            "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start ‚Äì –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help ‚Äì –°–ø—Ä–∞–≤–∫–∞\n"
            "/support ‚Äì –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"
        )

# ‚îÄ‚îÄ‚îÄ –ö–æ–º–∞–Ω–¥–∞ /support ‚îÄ‚îÄ‚îÄ #
async def support_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(
            "üì¨ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:\n"
            "@Mihailstryzkov\n\n"
            "–û–Ω –ø–æ–º–æ–∂–µ—Ç, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è! üí°"
        )

# ‚îÄ‚îÄ‚îÄ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ #
async def —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è(update, context):
    user_id = str(update.message.from_user.id)
    —Ç–µ–∫—Å—Ç = update.message.text.strip()

    —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ = context.user_data.get("—Ç–µ–∫—É—â–µ–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
    —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ = context.user_data.get("—Ç–µ–∫—É—â–∞—è_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")

    if not —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ or not —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:
        await update.message.reply_text("‚ùó –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ù–∞—á–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∑–∞–Ω–æ–≤–æ.")
        context.user_data.pop("—Ç–µ–∫—É—â–∞—è_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", None)
        context.user_data.pop("—Ç–µ–∫—É—â–µ–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", None)
        return

    today = datetime.now().strftime("%Y-%m-%d")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = load_user_data(user_id)

    if today not in data:
        data[today] = {}

    if not isinstance(data[today].get("—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"), dict):
        data[today]["—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"] = {}

    # –ò—â–µ–º –≤—Å–µ –ø—Ä–æ—à–ª—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    –ø—Ä–æ—à–ª–æ–µ = None
    –≤—Å–µ_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã = []

    for –¥–∞—Ç–∞, –∏–Ω—Ñ–æ in data.items():
        if –¥–∞—Ç–∞ in ("—Ü–µ–ª–∏", "username"):
            continue
        —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞_–¥–∞–Ω–Ω—ã–µ = –∏–Ω—Ñ–æ.get("—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", {})
        if isinstance(—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞_–¥–∞–Ω–Ω—ã–µ, dict):
            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞_–¥–∞–Ω–Ω—ã–µ.get(—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ)
            if —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
                –≤—Å–µ_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.append(—Ä–µ–∑—É–ª—å—Ç–∞—Ç)

    if –≤—Å–µ_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
        –ø—Ä–æ—à–ª–æ–µ = max(
            –≤—Å–µ_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã,
            key=lambda txt: —Ä–∞–∑–æ–±—Ä–∞—Ç—å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç(txt)[2] if —Ä–∞–∑–æ–±—Ä–∞—Ç—å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç(txt)[2] is not None else 0
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥
    data[today]["—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"][—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ] = —Ç–µ–∫—Å—Ç
    —Å–æ–æ–±—â–µ–Ω–∏–µ = f"üìå {—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ}: {—Ç–µ–∫—Å—Ç}"

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —á–∏—Å–ª–∞–º
    —Ç–µ–∫_–ø–æ–¥—ã, —Ç–µ–∫_–ø–æ–≤—Ç, —Ç–µ–∫_–≤–µ—Å = —Ä–∞–∑–æ–±—Ä–∞—Ç—å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç(—Ç–µ–∫—Å—Ç)
    if –ø—Ä–æ—à–ª–æ–µ:
        –ø—Ä–æ—à_–ø–æ–¥—ã, –ø—Ä–æ—à_–ø–æ–≤—Ç, –ø—Ä–æ—à_–≤–µ—Å = —Ä–∞–∑–æ–±—Ä–∞—Ç—å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç(–ø—Ä–æ—à–ª–æ–µ)

        if –ø—Ä–æ—à_–≤–µ—Å is not None:
            if —Ç–µ–∫_–≤–µ—Å > –ø—Ä–æ—à_–≤–µ—Å:
                —Å–æ–æ–±—â–µ–Ω–∏–µ += "\nüìà –û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ–¥–Ω—è–ª –±–æ–ª—å—à–∏–π –≤–µ—Å! üí™"
            elif —Ç–µ–∫_–≤–µ—Å == –ø—Ä–æ—à_–≤–µ—Å and —Ç–µ–∫_–ø–æ–≤—Ç > –ø—Ä–æ—à_–ø–æ–≤—Ç:
                —Å–æ–æ–±—â–µ–Ω–∏–µ += "\n‚ö° –¢—ã —Å–¥–µ–ª–∞–ª –±–æ–ª—å—à–µ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏ —Ç–æ–º –∂–µ –≤–µ—Å–µ. –ü–æ—Ä–∞ —É–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Å! ‚¨ÜÔ∏è"
            elif —Ç–µ–∫_–≤–µ—Å < –ø—Ä–æ—à_–≤–µ—Å or —Ç–µ–∫_–ø–æ–≤—Ç < –ø—Ä–æ—à_–ø–æ–≤—Ç:
                —Å–æ–æ–±—â–µ–Ω–∏–µ += "\nüîª –ú–µ–Ω—å—à–µ, —á–µ–º —Ä–∞–Ω—å—à–µ. –ú–æ–∂–µ—Ç, –¥–∞–ª —Å–µ–±–µ –æ—Ç–¥—ã—Ö? –ò–ª–∏ –Ω–µ —Ç–æ—Ç –¥–µ–Ω—å?"
            else:
                —Å–æ–æ–±—â–µ–Ω–∏–µ += "\nüìä –ü–æ–≤—Ç–æ—Ä–∏–ª –ø—Ä–µ–∂–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∂–µ —Å–∏–ª–∞!"

    write_user_data(user_id, data)
    await update.message.reply_text(—Å–æ–æ–±—â–µ–Ω–∏–µ)

    # –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    if "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è" in —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ and —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞["—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"]:
        —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞["—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"].pop(0)

        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ
        if —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞["—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"]:
            —Å–ª–µ–¥—É—é—â–µ–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ = —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞["—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"][0]
            context.user_data["—Ç–µ–∫—É—â–µ–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"] = —Å–ª–µ–¥—É—é—â–µ–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
            await update.message.reply_text(
                f"üî∏ {—Å–ª–µ–¥—É—é—â–µ–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ}\n\n"
                f"–í–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `3x10x20` (–ø–æ–¥—Ö–æ–¥—ã x –ø–æ–≤—Ç–æ—Ä—ã x –≤–µ—Å)",
                parse_mode="Markdown"
            )
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –º—ã—à—Ü
            –ø—Ä–æ–≥—Ä–∞–º–º–∞ = context.user_data.get("–≤—ã–±—Ä–∞–Ω–Ω–∞—è_–ø—Ä–æ–≥—Ä–∞–º–º–∞")
            context.user_data.clear()  # –æ—á–∏—â–∞–µ–º –≤—Å—ë –∫—Ä–æ–º–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            if –ø—Ä–æ–≥—Ä–∞–º–º–∞:
                context.user_data["–≤—ã–±—Ä–∞–Ω–Ω–∞—è_–ø—Ä–æ–≥—Ä–∞–º–º–∞"] = –ø—Ä–æ–≥—Ä–∞–º–º–∞

            await –Ω–∞–∑–∞–¥_–∫_–º—ã—à—Ü–∞–º_callback(update, context)
            return
    else:
        await update.message.reply_text("‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        context.user_data.pop("—Ç–µ–∫—É—â–∞—è_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", None)
        context.user_data.pop("—Ç–µ–∫—É—â–µ–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", None)

# –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def edit_card_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üèãÔ∏è –í–µ—Å", callback_data="edit_weight"),
         InlineKeyboardButton("üëü –®–∞–≥–∏", callback_data="edit_steps")],
        [InlineKeyboardButton("üò¥ –°–æ–Ω", callback_data="edit_sleep"),
         InlineKeyboardButton("üî• –ö–∞–ª–æ—Ä–∏–∏", callback_data="edit_calories")],
    ]

    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def edit_weight_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["editing_field"] = "–≤–µ—Å"
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å:")

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
async def save_new_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    new_value = update.message.text
    editing_field = context.user_data.get("editing_field")
    if editing_field:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON
        data = load_user_data(user_id)
        today = str(date.today())
        if today not in data:
            data[today] = {}
        data[today][editing_field] = new_value
        write_user_data(user_id, data)
        if update.message:
            await update.message.reply_text(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è '{editing_field}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        context.user_data.pop("editing_field")
    else:
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å.")
    if "input_sequence" in context.user_data:
        await ask_next_field(update, context)

# ‚îÄ‚îÄ‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ‚îÄ‚îÄ‚îÄ #
def load_user_data(user_id):
    path = get_user_file(user_id)
    if not os.path.exists(path):
        return {}
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON-—Ñ–∞–π–ª
def write_user_data(user_id, data):
    os.makedirs("users", exist_ok=True)
    path = get_user_file(user_id)
    if "username" not in data:
        data["username"] = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def plot_weight_graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_user_data(user_id)
    dates = []
    weights = []
    for key in sorted(data.keys()):
        if key in ("—Ü–µ–ª–∏", "username"):
            continue
        day_data = data[key]
        weight = day_data.get("–≤–µ—Å")
        if weight:
            try:
                weights.append(float(weight))
                dates.append(key)
            except ValueError:
                continue
    if not weights:
        if update.message:
            await update.message.reply_text("üìâ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Å–µ.")
        return
    plt.figure(figsize=(6, 4))
    plt.plot(dates, weights, marker='o')
    plt.title("–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–í–µ—Å (–∫–≥)")
    plt.grid(True)
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)

    await update.message.reply_photo(photo=buffer)
    buffer.close()

# ‚îÄ‚îÄ‚îÄ –ö–æ–º–∞–Ω–¥–∞ /start ‚îÄ‚îÄ‚îÄ #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    data = load_user_data(user_id)
    username = update.message.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    data["username"] = username
    write_user_data(user_id, data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_file = f"users/{user_id}.json"

    if not os.path.exists("users"):
        os.makedirs("users")

    if not os.path.exists(user_file):
        with open(user_file, "w", encoding="utf-8") as f:
            json.dump({"id": user_id}, f, ensure_ascii=False, indent=2)


    if "—Ü–µ–ª–∏" not in data or not data["—Ü–µ–ª–∏"]:
        context.user_data["awaiting_goals"] = True
        if update.message:
            await update.message.reply_text(
                "üéØ –í–≤–µ–¥–∏ —Å–≤–æ–∏ —Ü–µ–ª–∏ (–æ–¥–∏–Ω —Ä–∞–∑):\n\n"
                "–∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å: 70\n"
                "–∂–µ–ª–∞–µ–º—ã–µ —à–∞–≥–∏: 12000\n"
                "–∂–µ–ª–∞–µ–º—ã–π —Å–æ–Ω: 8 —á\n"
                "–∂–µ–ª–∞–µ–º—ã–µ –∫–∞–ª–æ—Ä–∏–∏: 2500\n"
                "—Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–µ—Å: 75\n\n"
                "üìå –û—Ç–ø—Ä–∞–≤—å –≤—Å—ë —ç—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!"
            )
        return
    keyboard = [
        [KeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ"), KeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É")],
        [KeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞"), KeyboardButton("üìã –ö–∞—Ä—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")],
        [KeyboardButton("üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üèÅ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=False
    )
    if update.message:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –±–æ—Ç üí™\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )

# ‚îÄ‚îÄ‚îÄ –ö–æ–º–∞–Ω–¥–∞ /–Ω–∞—á–∞—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ #
async def –Ω–∞—á–∞—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    –º—ã—à—Ü–∞ = context.user_data.get("–≤—ã–±—Ä–∞–Ω–Ω–∞—è_–º—ã—à—Ü–∞", "–º—ã—à—Ü–∞")
    —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è = context.user_data.get("—Å–ø–∏—Å–æ–∫_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π", [])

    if not —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:
        await query.edit_message_text("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    —Ç–µ–∫—Å—Ç = f"üèÅ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ {–º—ã—à—Ü–∞}!\n\n"
    for —É–ø—Ä in —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:
        —Ç–µ–∫—Å—Ç += f"üî∏ {—É–ø—Ä}\n"

    —Ç–µ–∫—Å—Ç += "\n–ö–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—à—å, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –æ—Ç—á—ë—Ç\n"


    await query.edit_message_text(—Ç–µ–∫—Å—Ç)
    context.user_data.clear()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ
    context.user_data["—Ç–µ–∫—É—â–∞—è_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"] = {
        "–º—ã—à—Ü–∞": –º—ã—à—Ü–∞,
        "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è": —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.copy(),  # —Å–ø–∏—Å–æ–∫
        "–ø—Ä–æ–≥—Ä–µ—Å—Å": {}  # —Ç—É—Ç –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ
    await –ø–æ–∫–∞–∑–∞—Ç—å_—Å–ª–µ–¥—É—é—â–µ–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ(query, context)


# ‚îÄ‚îÄ‚îÄ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ ‚îÄ‚îÄ‚îÄ #
def get_progress_bar(percent):
    blocks = int(percent / 10)
    return "‚ñì" * blocks + "‚ñë" * max(0, 10 - blocks)

# ‚îÄ‚îÄ‚îÄ –ö–æ–º–∞–Ω–¥–∞ /input ‚îÄ‚îÄ‚îÄ #
async def input_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏ —Å–≤–æ–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "–≤–µ—Å: 74\n"
            "—à–∞–≥–∏: 11000\n"
            "–∫–∞–ª–æ—Ä–∏–∏: 2300\n"
            "—Å–æ–Ω: 7 —á\n\n"
            "üìå –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≤—Å—ë —ç—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!",
            parse_mode="HTML"
        )

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
async def save_user_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    username = update.message.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    text = update.message.text
    today = datetime.now().strftime("%Y-%m-%d")
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–¥–æ–±–∞–≤—å —ç—Ç–æ —Å—Ä–∞–∑—É)
    data = load_user_data(user_id)
    data["username"] = username  # <-- —Ç–µ–ø–µ—Ä—å –∏–º—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞
    # –ï—Å–ª–∏ –±–æ—Ç –∂–¥—ë—Ç —Ü–µ–ª–∏
    if context.user_data.get("awaiting_goals"):
        try:
            lines = text.split('\n')
            goals = {}
            for line in lines:
                if ":" in line:
                    key, value = line.split(":", 1)
                    goals[key.strip()] = value.strip()
            data["—Ü–µ–ª–∏"] = goals  # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
            write_user_data(user_id, data)
            if update.message:
                await update.message.reply_text("‚úÖ –¶–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ú–æ–∂–µ—à—å –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É.")
            context.user_data.pop("awaiting_goals")
            return
        except Exception as e:
            if update.message:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–µ–π: {e}")
            return

    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
    try:
        lines = text.split('\n')
        entry = {}
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º: —ç—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –µ—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Ö–æ–∂–∏ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        exercise_keywords = ["–ø—Ä–∏—Å–µ–¥", "–∂–∏–º", "—Ç—è–≥–∞", "–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", "–æ—Ç–∂–∏–º–∞–Ω–∏—è", "–ø–ª–∞–Ω–∫–∞"]
        is_workout = all(any(word in line.lower() for word in exercise_keywords) for line in lines if ":" in line)
        if is_workout:
            exercises = {}
            for line in lines:
                if ":" in line:
                    name, value = line.split(":", 1)
                    exercises[name.strip()] = value.strip()
            data = load_user_data(user_id)
            if today not in data:
                data[today] = {}
            data[today]["—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"] = exercises
            write_user_data(user_id, data)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            message = f"üìã –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞ {today}:\n\n"
            for name, reps in exercises.items():
                message += f"{name.capitalize()}: {reps}\n"
            if update.message:
                await update.message.reply_text(message)
            return
        # –ï—Å–ª–∏ –ø–æ–ª—è –ø–æ—Ö–æ–∂–∏ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ‚Äî –¥–æ–±–∞–≤–∏–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ–∫—Ü–∏—é
        exercises = {}
        for k, v in entry.items():
            if any(ex in k.lower() for ex in ["–ø—Ä–∏—Å–µ–¥", "–∂–∏–º", "—Ç—è–≥–∞", "–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", "–æ—Ç–∂–∏–º–∞–Ω–∏—è"]):
                exercises[k] = v
        if exercises:
            entry["—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"] = exercises
        for line in lines:
            if ":" in line:
                key, value = line.split(':', 1)
                entry[key.strip()] = value.strip()
        data = load_user_data(user_id)
        if today not in data:
            data[today] = {}
        data[today].update(entry)
        write_user_data(user_id, data)
        if update.message:
            await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ù–∞–ø–∏—à–∏ /card —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.")
    except Exception as e:
        if update.message:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É programs.json
programs_path = os.path.join(os.path.dirname(__file__), "programs.json")

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
with open(programs_path, "r", encoding="utf-8") as f:
    programs = json.load(f)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
async def handle_exercise_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–§—É–ª–±–∞–¥–∏", callback_data="–ø—Ä–æ–≥—Ä–∞–º–º–∞_—Ñ—É–ª–±–∞–¥–∏"),
            InlineKeyboardButton("–°–ø–ª–∏—Ç", callback_data="–ø—Ä–æ–≥—Ä–∞–º–º–∞_—Å–ø–ª–∏—Ç")
        ],
        [
            InlineKeyboardButton("–í–µ—Ä—Ö/–ù–∏–∑", callback_data="–ø—Ä–æ–≥—Ä–∞–º–º–∞_–≤–µ—Ä—Ö/–Ω–∏–∑")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–§—É–ª–±–∞–¥–∏", "–°–ø–ª–∏—Ç" –∏ —Ç.–ø.
async def choose_program(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    –≤—ã–±–æ—Ä = query.data.replace("–ø—Ä–æ–≥—Ä–∞–º–º–∞_", "")
    context.user_data["–≤—ã–±—Ä–∞–Ω–Ω–∞—è_–ø—Ä–æ–≥—Ä–∞–º–º–∞"] = –≤—ã–±–æ—Ä

    –º—ã—à—Ü—ã = programs.get(–≤—ã–±–æ—Ä, [])
    if –º—ã—à—Ü—ã:
        keyboard = [[InlineKeyboardButton(–º, callback_data=f"–º—ã—à—Ü–∞_{–º}")] for –º in –º—ã—à—Ü—ã]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –º—ã—à—Ü—É:", reply_markup=reply_markup)
    else:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º—ã—à—Ü—ã –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.")


# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
async def show_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    today = datetime.now().strftime("%Y-%m-%d")
    data = load_user_data(user_id)
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ ‚Äî –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –¥–∞—Ç—É
    entry = data.get(today, {})
    if not any(entry.values()):
        previous_days = sorted(data.keys(), reverse=True)
        for date in previous_days:
            if isinstance(data[date], dict) and any(data[date].values()):
                today = date
                break
        else:
            if update.message:
                await update.message.reply_text("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
            return
    d = data[today]
    weight_prog = ""
    steps_prog = ""
    sleep_prog = ""
    calories_prog = ""
    goals = data.get("—Ü–µ–ª–∏", {})
    desired_weight = goals.get("–∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å", "‚Äì")
    desired_steps = goals.get("–∂–µ–ª–∞–µ–º—ã–µ —à–∞–≥–∏", "‚Äì")
    desired_sleep = goals.get("–∂–µ–ª–∞–µ–º—ã–π —Å–æ–Ω", "‚Äì")
    desired_calories = goals.get("–∂–µ–ª–∞–µ–º—ã–µ –∫–∞–ª–æ—Ä–∏–∏", "‚Äì")
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    weight = d.get("–≤–µ—Å")
    steps = d.get("—à–∞–≥–∏")
    sleep = d.get("—Å–æ–Ω")
    calories = d.get("–∫–∞–ª–æ—Ä–∏–∏")

    weight_prog = steps_prog = sleep_prog = calories_prog = ""

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–µ—Å—É
    try:
        if weight and desired_weight:
            weight_diff = float(weight) - float(desired_weight)
            start_diff = float(goals.get("—Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–µ—Å", weight)) - float(desired_weight)
            if start_diff != 0:
                percent_weight = round((1 - weight_diff / start_diff) * 100)
                percent_weight = min(max(percent_weight, 0), 100)
                weight_prog = f"–í–µ—Å: {get_progress_bar(percent_weight)} {percent_weight}%"
    except:
        weight_prog = "–í–µ—Å: ‚ùå –æ—à–∏–±–∫–∞"

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —à–∞–≥–∞–º
    try:
        if steps and desired_steps:
            percent_steps = round(int(steps) / int(desired_steps) * 100)
            steps_prog = f"–®–∞–≥–∏: {get_progress_bar(percent_steps)} {percent_steps}%"
    except:
        steps_prog = "–®–∞–≥–∏: ‚ùå –æ—à–∏–±–∫–∞"

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–Ω—É
    try:
        if sleep and desired_sleep:
            s_cur = float(sleep.split()[0])
            s_goal = float(desired_sleep.split()[0])
            percent_sleep = round(s_cur / s_goal * 100)
            percent_sleep = min(percent_sleep, 100)
            sleep_prog = f"–°–æ–Ω: {get_progress_bar(percent_sleep)} {percent_sleep}%"
    except:
        sleep_prog = "–°–æ–Ω: ‚ùå –æ—à–∏–±–∫–∞"

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
    try:
        if calories is not None and desired_calories:
            percent_calories = round(int(calories) / int(desired_calories) * 100)
            calories_prog = f"–ö–∞–ª–æ—Ä–∏–∏: {get_progress_bar(percent_calories)} {percent_calories}%"
    except:
        calories_prog = "–ö–∞–ª–æ—Ä–∏–∏: ‚ùå –æ—à–∏–±–∫–∞"



    # –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    card = f"""üìÖ –î–∞—Ç–∞: {today}
üéØ –¶–µ–ª—å: {desired_weight} –∫–≥, {desired_steps} —à–∞–≥–æ–≤, {desired_sleep} —Å–Ω–∞, {desired_calories} –∫–∞–ª–æ—Ä–∏–π

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üîπ –°–µ–π—á–∞—Å:
‚öñÔ∏è –í–µ—Å: {weight} –∫–≥
üèÉ –®–∞–≥–∏: {steps}
üî• –ö–∞–ª–æ—Ä–∏–∏: {d.get('–∫–∞–ª–æ—Ä–∏–∏', '‚Äì')}
üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {d.get('—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '‚Äì')}
üõå –°–æ–Ω: {sleep}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Ü–µ–ª–∏:
{weight_prog}
{steps_prog}
{sleep_prog}
{calories_prog}
"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è" in d:
        card += "\nüèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"
        for name, reps in d["—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"].items():
            card += f"{name.capitalize()}: {reps}\n"
    if update.message:
        await update.message.reply_text(
            card,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="edit_card_fields")]
            ])
        )

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
ASK_EXERCISE_COUNT, CHOOSE_MUSCLE = range(2)

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id –≥–∏—Ñ–∫–∏
async def get_file_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.animation:
        file_id = update.message.animation.file_id
        await update.message.reply_text(f"üé¨ file_id –≥–∏—Ñ–∫–∏:\n{file_id}")
    else:
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –≥–∏—Ñ–∫–∞.")


# ‚îÄ‚îÄ‚îÄ –ù–∞—á–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚îÄ‚îÄ‚îÄ
async def start_custom_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [
        [
            InlineKeyboardButton("–§—É–ª–±–∞–¥–∏", callback_data="–ø—Ä–æ–≥—Ä–∞–º–º–∞_—Ñ—É–ª–±–∞–¥–∏"),
            InlineKeyboardButton("–°–ø–ª–∏—Ç", callback_data="–ø—Ä–æ–≥—Ä–∞–º–º–∞_—Å–ø–ª–∏—Ç")
        ],
        [
            InlineKeyboardButton("–í–µ—Ä—Ö/–ù–∏–∑", callback_data="–ø—Ä–æ–≥—Ä–∞–º–º–∞_–≤–µ—Ä—Ö/–Ω–∏–∑")
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=markup)
    return ConversationHandler.END  # <== –º—ã —É—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞, –¥–∞–ª—å—à–µ –ª–æ–≥–∏–∫–∞ –∏–¥—ë—Ç –≤ choose_program



# ‚îÄ‚îÄ‚îÄ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ –ø–æ–∫–∞–∑ –º—ã—à—Ü ‚îÄ‚îÄ‚îÄ
async def receive_exercise_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text.strip())
        context.user_data["—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π_–≤—Å–µ–≥–æ"] = count
    except ValueError:
        if update.message:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 5.")
        return ASK_EXERCISE_COUNT
    # –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ –º—ã—à—Ü ‚Äî –ø–æ–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥–∏–º
    muscles = ["–ë–∏—Ü–µ–ø—Å", "–°–ø–∏–Ω–∞", "–ù–æ–≥–∏", "–ü–ª–µ—á–∏", "–ü—Ä–µ—Å—Å"]
    context.user_data["—Å–ø–∏—Å–æ–∫_–º—ã—à—Ü"] = muscles
    keyboard = [[InlineKeyboardButton(–º, callback_data=f"–º—ã—à—Ü–∞_{–º}")] for –º in muscles]
    markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –º—ã—à—Ü—É –¥–ª—è –Ω–∞—á–∞–ª–∞:", reply_markup=markup)
    return CHOOSE_MUSCLE

# ‚îÄ‚îÄ‚îÄ –ü–æ–∫–∞–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º—ã—à—Ü–µ ‚îÄ‚îÄ‚îÄ
async def choose_muscle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    –º—ã—à—Ü–∞ = query.data.replace("–º—ã—à—Ü–∞_", "")
    context.user_data["–≤—ã–±—Ä–∞–Ω–Ω–∞—è_–º—ã—à—Ü–∞"] = –º—ã—à—Ü–∞

    user_id = str(query.from_user.id)  # <-- —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –î–û load_user_data
    data = load_user_data(user_id)
    
    —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è = {
        "–ë–∏—Ü–µ–ø—Å": ["–ú–æ–ª–æ—Ç–∫–∏"],
        "–°–ø–∏–Ω–∞": ["–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è"],
        "–ù–æ–≥–∏": ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è"],
        "–ü–ª–µ—á–∏": ["–ú–∞—Ö–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—ã"],
        "–ü—Ä–µ—Å—Å": ["–ü–ª–∞–Ω–∫–∞"],
        "–ù–∏–∑ —Ç–µ–ª–∞": ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è"],
        "–ì—Ä—É–¥—å": ["–û—Ç–∂–∏–º–∞–Ω–∏—è"],
        "–¢—Ä–∏—Ü–µ–ø—Å": ["–û—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –±—Ä—É—Å—å—è—Ö"],
        "–ü—Ä–µ–¥–ø–ª–µ—á—å—è": ["–í–∏—Å –Ω–∞ —Ç—É—Ä–Ω–∏–∫–µ"]
    }

    —Å–ø–∏—Å–æ–∫ = —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.get(–º—ã—à—Ü–∞, []).copy()  # —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è

    # –ò—Å–∫–ª—é—á–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    —É–¥–∞–ª—ë–Ω–Ω—ã–µ = data.get("—É–¥–∞–ª—ë–Ω–Ω—ã–µ_—Å–∏—Å—Ç–µ–º–Ω—ã–µ", {}).get(–º—ã—à—Ü–∞, [])
    —Å–ø–∏—Å–æ–∫ = [—É–ø—Ä for —É–ø—Ä in —Å–ø–∏—Å–æ–∫ if —É–ø—Ä not in —É–¥–∞–ª—ë–Ω–Ω—ã–µ]

    –¥–æ–ø = data.get("–¥–æ–ø_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", {}).get(–º—ã—à—Ü–∞, [])
    —Å–ø–∏—Å–æ–∫ += –¥–æ–ø

    context.user_data["—Å–ø–∏—Å–æ–∫_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"] = —Å–ø–∏—Å–æ–∫

    —Ç–µ–∫—Å—Ç = f"üìå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ {–º—ã—à—Ü–∞}:\n" + "\n".join(f"‚Ä¢ {—É–ø—Ä}" for —É–ø—Ä in —Å–ø–∏—Å–æ–∫)
    –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ = [
        [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="–Ω–∞—á–∞—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="–¥–æ–±–∞–≤–∏—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="—É–¥–∞–ª–∏—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–∫_–º—ã—à—Ü–∞–º")]
    ]

    await query.edit_message_text(—Ç–µ–∫—Å—Ç, reply_markup=InlineKeyboardMarkup(–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞))


# ‚îÄ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ #
def main():
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("input", input_data))
    app.add_handler(CommandHandler("card", show_card))
    app.add_handler(CommandHandler("graph", plot_weight_graph))
    app.add_handler(CommandHandler("download_everything", send_all_user_data))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("support", support_command))
    app.add_handler(CommandHandler("workout_plan", show_workout_plan))
    app.add_handler(CommandHandler("thousand", thousand_handler))
    app.add_handler(CommandHandler("update", notify_users))
    app.add_handler(CommandHandler("online", notify_online))


    # –ö–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìù –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ$"), start_sequential_input))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), show_statistics))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìä –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É$"), show_card))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìà –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞$"), plot_weight_graph))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìã –ö–∞—Ä—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏$"), show_workout_card))
    app.add_handler(MessageHandler(filters.ANIMATION, get_file_id))

    # ConversationHandler —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—á—ë—Ç–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (–µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω –≤ –±—É–¥—É—â–µ–º)
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üèÅ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É$"), start_custom_workout)],
        states={},
        fallbacks=[]
    )
    app.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º—ã—à—Ü ‚Äì –æ—Ç–¥–µ–ª—å–Ω–æ
    app.add_handler(CallbackQueryHandler(choose_muscle, pattern="^–º—ã—à—Ü–∞_"))

    async def route_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        if not update.message:
            return

        # –ï—Å–ª–∏ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if "—Ç–µ–∫—É—â–∞—è_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" in context.user_data and "—Ç–µ–∫—É—â–µ–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ" in context.user_data:
            await —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è(update, context)
            return

        if context.user_data.get("–æ–∂–∏–¥–∞–µ–º_–Ω–æ–≤–æ–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"):
            —Ç–µ–∫—Å—Ç = update.message.text.strip()
            user_id = str(update.message.from_user.id)
            muscle = context.user_data.get("–≤—ã–±—Ä–∞–Ω–Ω–∞—è_–º—ã—à—Ü–∞")
            data = load_user_data(user_id)
            data.setdefault("–¥–æ–ø_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", {})
            data["–¥–æ–ø_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"].setdefault(muscle, []).append(—Ç–µ–∫—Å—Ç)
            write_user_data(user_id, data)
            context.user_data.pop("–æ–∂–∏–¥–∞–µ–º_–Ω–æ–≤–æ–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
            await update.message.reply_text(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ¬´{—Ç–µ–∫—Å—Ç}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ {muscle}!")
            return

        # –ï—Å–ª–∏ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if "editing_field" in context.user_data:
            await save_new_value(update, context)
            return

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö (—Å–æ–¥–µ—Ä–∂–∏—Ç ":")
        if ":" in update.message.text:
            await save_user_data(update, context)
            return

        # –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        await handle_unknown_message(update, context)

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, route_text_handler))
    app.add_handler(CallbackQueryHandler(edit_card_callback, pattern="^edit_card_fields$"))
    app.add_handler(CallbackQueryHandler(edit_weight_callback, pattern="^edit_weight$"))
    app.add_handler(CallbackQueryHandler(edit_steps_callback, pattern="^edit_steps$"))
    app.add_handler(CallbackQueryHandler(edit_sleep_callback, pattern="^edit_sleep$"))
    app.add_handler(CallbackQueryHandler(edit_workout_callback, pattern="^edit_workout$"))
    app.add_handler(CallbackQueryHandler(choose_program, pattern="^–ø—Ä–æ–≥—Ä–∞–º–º–∞_"))
    app.add_handler(CallbackQueryHandler(–Ω–∞—á–∞—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è_callback, pattern="^–Ω–∞—á–∞—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è$"))
    app.add_handler(CallbackQueryHandler(edit_calories_callback, pattern="^edit_calories$"))
    app.add_handler(CallbackQueryHandler(–¥–æ–±–∞–≤–∏—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ_callback, pattern="^–¥–æ–±–∞–≤–∏—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ$"))
    app.add_handler(CallbackQueryHandler(—É–¥–∞–ª–∏—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ_callback, pattern="^—É–¥–∞–ª–∏—Ç—å_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ$"))
    app.add_handler(CallbackQueryHandler(–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å_—É–¥–∞–ª–µ–Ω–∏–µ_—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, pattern="^—É–¥–∞–ª–∏_—É–ø—Ä_"))
    app.add_handler(CallbackQueryHandler(–Ω–∞–∑–∞–¥_–∫_–º—ã—à—Ü–∞–º_callback, pattern="^–Ω–∞–∑–∞–¥_–∫_–º—ã—à—Ü–∞–º$"))


    app.run_polling()

if __name__ == "__main__":
    main()
